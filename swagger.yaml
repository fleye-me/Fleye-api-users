openapi: 3.0.1
info:
  title: Users API
  description: CRUD API for consulting data on users.
  version: 1.0.0
servers:
  - url: http://localhost:3000/
paths:
  /users:
    get:
      tags:
        - Users
      summary: Obtain user's data
      description: |
        Returns information about users: id, name and age. It is possible to apply filters to this request.
      parameters:
        - name: limit
          in: query
          description: Limit of users dipsplayed on the page/returned.
          schema:
            type: integer
        - name: page
          in: query
          description: Select the page of the result. Page is related to limit - a page has x amount of data instances, x being the limit.
          schema:
            type: integer
        - name: sort
          in: query
          description: Defines the order of the data. Can be either ASC or DESC, the latter is the default value.
          schema:
            type: string
        - name: skip
          in: query
          description: Skips the top x results.
          schema:
            type: integer
        - name: filter
          in: query
          description: Filters the results. Filter is a string organized as a JSON object. It may include id, name and age values.
          schema:
            type: string
            format: id, name, age
      responses:
        200:
          description: A JSON array of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                name: Ana
                age: 90
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Users
      summary: Create user.
      description: |
        Create a user. Id is sequential and automatically atributed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-NameAge'
      responses:
        201:
          description: User created successfully.
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Consult user.
      description: |
        Obtaing information on a specific user by passing their id.
      parameters:
        - name: id
          in: path
          description: User unique identifier.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: JSON object of a single user's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user.
      description: |
        Updating a specified user. It is necessary to inform all fields of user object - name and age.
      parameters:
        - name: id
          in: path
          description: User unique identifier.
          required: true
          schema:
            type: integer
      requestBody:
        description: User updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-NameAge'
      responses:
        200:
          description: User modified successfully.
        404:
          description: User not found.
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete user.
      description: |
        Deleting a specific user.
      parameters:
        - name: id
          in: path
          description: User unique identifier.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully.
        404:
          description: User not found.
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Users
      summary: Update user.
      description: |
        Updating a specific user. It is necessary to inform only the fields that are altering.
      parameters:
        - name: id
          in: path
          description: User unique identifier.
          required: true
          schema:
            type: integer
      requestBody:
        description: User updated information. Only updated fields are necessary.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-NameAge'

      responses:
        200:
          description: User updated successfully.
        400:
          description: Error. Unable to update either name and age. //revisar
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the user.
        name:
          type: string
          description: Name of the user.
        age:
          type: integer
          description: Age of the user.
    User-NameAge:
      type: object
      properties:
        name:
          type: string
          description: Name of the user.
        age:
          type: number
          description: Age of the user.
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
