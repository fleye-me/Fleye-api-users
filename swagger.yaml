openapi: 3.0.1
info:
  title: Users API
  description: CRUD API for consulting data on users
  version: 1.0.0
servers:
- url: http://localhost:3000/
paths:
  /users:
    get:
      tags:
      - Users
      summary: User's data
      description: |
        The users endpoint returns information about the users. The response includes the display of name, age and id. It is possible to apply filters to this request.
      parameters:
      - name: limit
        in: query
        description: Set a limit of instances that can be returned.
        schema:
          type: integer
      - name: page
        in: query
        description: Select the page of the result. A page has x amount of rows (x
          being the limit).
        schema:
          type: integer
      - name: sort
        in: query
        description: Defines the order of the data. Can be either ASC or DESC, the
          latter being the default value.
        schema:
          type: string
      - name: skip
        in: query
        description: Skips the first n results.
        schema:
          type: integer
      - name: filter
        in: query
        description: Filters the results.
        schema:
          type: string
          format: id, name, age
      responses:
        200:
          description: A JSON array of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                name: Ana
                age: 90
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              
    post:
      tags:
      - Users
      summary: Create user.
      description: |
        Create a user. Id is sequential and atributed by the banco de dados
      requestBody:
        required: true
        content:
          application/json: 
            schema:
                $ref: '#/components/schemas/UserNoId'
      responses:
        201:
          description: User created successfully.
        default:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
      - Users
      summary: Consult specific user.
      description: |
        The id of the user endpoint returns data of the specified user.
      parameters:
      - name: id
        in: path
        description: User unique identifier (id).
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Json file of a single user's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - users
      summary: Update user of the informed id.
      description: |
        The id of the user endpoint returns data of the specified user.
      parameters:
      - name: id
        in: path
        description: User unique identifier (id).
        required: true
        schema:
          type: integer
      responses:
        200:
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Cannot update user. Need more info?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Users
      summary: Price Estimates
      description: |
        The id of the user endpoint returns data of the specified user.
      parameters:
      - name: id
        in: path
        description: User unique identifier (id).
        required: true
        schema:
          type: integer
      responses:
        200:
          description: User deleted successfully.
          content: {}
        default:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - Users
      summary: Price Estimates
      description: |
        The id of the user endpoint returns data of the specified user.
      parameters:
      - name: id
        in: path
        description: User unique identifier (id).
        required: true
        schema:
          type: integer
      responses:
        200:
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier representing a specific user.
        name:
          type: string
          description: Name of the user.
        age:
          type: number
          description: Age of the user.
    UserNoId:
      type: object
      properties:
        name:
          type: string
          description: Name of the user.
        age:
          type: number
          description: Age of the user.
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        fields:
          type: string
